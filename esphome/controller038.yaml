substitutions:
  name: controller038
  description: Aquarium Auto Top Off

# Enable logging
logger:

<<: !include include/common.yaml

esphome:
  name: $name
  platform: ESP8266
  board: d1_mini

script:
  - id: turn_on_fill
    then:
      - if:
          condition:
            and:
              - binary_sensor.is_off: fill_pump_water_sensor
              - binary_sensor.is_on: tank_water_sensor
          then:
            - servo.write:
                id: fill_pump
                level: 95%

servo:

  # pump 1, drain
  - id: drain_pump
    output: pwm_d2
    min_level: 0
    idle_level: 0
    max_level: 1

  # pump 2, fill
  - id: fill_pump
    output: pwm_d7
    min_level: 0
    idle_level: 0
    max_level: 1


binary_sensor:

  - platform: gpio
    id: drain_pump_water_sensor
    pin:
      number: D1
      mode: INPUT_PULLUP
    name: $description Drain Pump Water Sensor
    filters:
      - invert:

  - platform: gpio
    id: fill_pump_water_sensor
    pin:
      number: D6
      mode: INPUT_PULLUP
    name: $description Fill Pump Water Sensor
    filters:
      - invert:
    on_release:
      then:
        - script.execute: turn_on_fill
    on_press:
      then:
        - servo.detach: fill_pump

  - platform: gpio
    id: tank_water_sensor
    pin:
      number: D5
      mode: INPUT_PULLUP
    name: $description Tank Water Sensor
    filters:
      - invert:
      - delayed_on_off: 500ms
    on_press:
      then:
        - script.execute: turn_on_fill
    on_release:
      then:
        - servo.detach: fill_pump

output:

  - platform: esp8266_pwm
    id: pwm_d2
    pin: D2
    frequency: 20000 Hz

  - platform: esp8266_pwm
    id: pwm_d7
    pin: D7
    frequency: 20000 Hz

api:
  services:

    - service: control_drain_pump
      variables:
        level: float
      then:
        - logger.log:
            format: "Drain Pump called with value %.1f"
            args: [ 'level' ]
        - servo.write:
            id: drain_pump
            level: !lambda 'return level / 100.0;'

    - service: control_fill_pump
      variables:
        level: float
      then:
        - logger.log:
            format: "Fill Pump called with value %.1f"
            args: [ 'level' ]
        - servo.write:
            id: fill_pump
            level: !lambda 'return level / 100.0;'
