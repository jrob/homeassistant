# Example config for when jp8-jp11 are all bridged - this connects all the voltage channels and allows for power to be calculated by the meter directly.
# Boards >= v1.4 jp8-jp11 are removed and have all voltage channels connected

substitutions:
  name: sensor052
  description: Main Energy Monitor
  static_ip: !secret sensor052_ip
# Change the disp_name to something you want
  disp_name: 6C
# Interval of how often the power is updated
  update_time: 10s
# Current Transformers:
#  20A/25mA SCT-006: 11143
#  30A/1V SCT-013-030: 8650
#  50A/1V SCT-013-050: 15420
#  80A/26.6mA SCT-010: 41660
#  100A/50ma SCT-013-000: 27518
#  120A/40mA: SCT-016: 41787
#  200A/100mA SCT-024: 27518
  current_cal: '27518'
# Jameco 9VAC Transformer:
#  For meter versions:
#  >= v1.3: 7305
  #voltage_cal: '7305'
  voltage_cal: '7389'

esphome:
  name: $name
  comment: $description
  platform: ESP32
  board: nodemcu-32s

# Enable logging
logger:

<<: !include include/common.yaml

#wifi:
#  ssid: !secret wifi_ssid
#  password: !secret wifi_pass
#  #manual_ip:
#  #  static_ip: !secret ip_eh_nrgnode
#  #  gateway: !secret ip_gateway
#  #  subnet: !secret ip_subnet
#  #  dns1: !secret ip_dns1
#
## mqtt:
##  broker: !secret mqtt_broker
##  username: !secret mqtt_user
##  password: !secret mqtt_pass
#
## Enable logging
#logger:
#
## Enable Home Assistant API
#api:
#
#ota:

web_server:
  port: 80

spi:
  clk_pin: 18
  miso_pin: 19
  mosi_pin: 23

sensor:
  - platform: wifi_signal
    name: ${description} WiFi
    update_interval: 60s
#IC1
  - platform: atm90e32
    cs_pin: 5
    phase_a:
      voltage:
        name: ${description} Volts A
        id: ic1Volts
        accuracy_decimals: 1
      current:
        name: ${description} CT1 Amps
        id: ct1Amps
# The max value for current that the meter can output is 65.535. If you expect to measure current over 65A,
# divide the gain_ct by 2 (120A CT) or 4 (200A CT) and multiply the current and power values by 2 or 4 by uncommenting the filter below
#        filters:
#          - multiply: 2
      power:
        name: ${description} CT1 Watts
        id: ct1Watts
#        filters:
#          - multiply: 2
      gain_voltage: ${voltage_cal}
      #gain_ct: 27518
      gain_ct: 28176
    phase_b:
      current:
        name: ${description} CT2 Amps
        id: ct2Amps
      power:
        name: ${description} CT2 Watts
        id: ct2Watts
      gain_voltage: ${voltage_cal}
      gain_ct: 28207
    phase_c:
      current:
        name: ${description} CT3 Amps
        id: ct3Amps
      power:
        name: ${description} CT3 Watts
        id: ct3Watts
      gain_voltage: ${voltage_cal}
      gain_ct: ${current_cal}
    frequency:
      name: ${description} Freq A
    line_frequency: 60Hz
    gain_pga: 1X
    update_interval: ${update_time}
#IC2
  - platform: atm90e32
    cs_pin: 4
    phase_a:
#this voltage is only needed if monitoring 2 voltages
      voltage:
        name: ${description} Volts B
        id: ic2Volts
        accuracy_decimals: 1
      current:
        name: ${description} CT4 Amps
        id: ct4Amps
      power:
        name: ${description} CT4 Watts
        id: ct4Watts
      gain_voltage: ${voltage_cal}
      gain_ct: ${current_cal}
    phase_b:
      current:
        name: ${description} CT5 Amps
        id: ct5Amps
      power:
        name: ${description} CT5 Watts
        id: ct5Watts
      gain_voltage: ${voltage_cal}
      gain_ct: 27938
    phase_c:
      current:
        name: ${description} CT6 Amps
        id: ct6Amps
      power:
        name: ${description} CT6 Watts
        id: ct6Watts
      gain_voltage: ${voltage_cal}
      gain_ct: 27904
    frequency:
      name: ${description} Freq B
    line_frequency: 60Hz
    gain_pga: 1X
    update_interval: ${update_time}

#Total Amps
  - platform: template
    name: ${description} Total Amps
    id: totalAmps
    lambda: return id(ct1Amps).state + id(ct2Amps).state + id(ct3Amps).state + id(ct4Amps).state + id(ct5Amps).state + id(ct6Amps).state ;
    accuracy_decimals: 2
    unit_of_measurement: A
    icon: "mdi:flash"
    update_interval: ${update_time}
#Total Watts
  - platform: template
    name: ${description} Total Watts
    id: totalWatts
    lambda: return id(ct1Watts).state + id(ct2Watts).state + id(ct3Watts).state + id(ct4Watts).state + id(ct5Watts).state + id(ct6Watts).state ;
    accuracy_decimals: 1
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: ${update_time}
#kWh
  - platform: total_daily_energy
    name: ${description} Total kWh
    power_id: totalWatts
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh

switch:
  - platform: restart
    name: ${description} Restart
time:
  - platform: sntp
    id: sntp_time
